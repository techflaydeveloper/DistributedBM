/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package manager;
import Cashier.DatabaseConfiguration;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author tuyeibill
 */
public class CounterUpdate extends javax.swing.JDialog {      
       DatabaseConfiguration mydb=new DatabaseConfiguration();
       private Connection conn;
       
    public CounterUpdate() {
        
        
        
        initComponents();
        setLocationRelativeTo(null);
        conn=mydb.getConnection();
        getAvailableDrinks();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        cartons = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jToggleButton1 = new javax.swing.JToggleButton();
        updatecounter = new javax.swing.JToggleButton();
        jLabel2 = new javax.swing.JLabel();
        mydrinkname = new javax.swing.JComboBox<>();

        jLabel4.setText("NO OF CARTONS/CRATES");

        jToggleButton1.setText("CANCEL");

        updatecounter.setText("Update Counter");
        updatecounter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updatecounterActionPerformed(evt);
            }
        });

        jLabel2.setText("Drink Name");

        mydrinkname.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Drink Name" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 644, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jToggleButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(70, 70, 70)
                .addComponent(updatecounter, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(58, 58, 58))
            .addGroup(layout.createSequentialGroup()
                .addGap(99, 99, 99)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(mydrinkname, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cartons, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mydrinkname, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(58, 58, 58)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cartons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updatecounter)
                    .addComponent(jToggleButton1))
                .addGap(94, 94, 94))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void updatecounterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updatecounterActionPerformed
       PreparedStatement selectStore,selectCounter,insertCounter,updateTables,updateStockTable=null;
       ResultSet myresult0=null;
       ResultSet mystore=null;      
        int mydrinkindex=mydrinkname.getSelectedIndex();
        float enteredStock=Float.parseFloat(cartons.getText());
       
       if(mydrinkindex !=0){
           try{
               selectStore=conn.prepareStatement("SELECT no_of_cartons,units_per_carton FROM store_drinks WHERE drink_name='"+mydrinkname.getSelectedItem().toString()+"'");
               mystore=selectStore.executeQuery();
               if(mystore.next()){
                   float mystorestock=mystore.getFloat("no_of_cartons");
                   float updatedStock=mystorestock-enteredStock;
                   if(updatedStock>=0){
                      try{
                          selectCounter=conn.prepareStatement("SELECT drink_name,no_of_cartons FROM counter_drinks WHERE drink_name='"+mydrinkname.getSelectedItem().toString()+"'");
                          myresult0=selectCounter.executeQuery();
                          //checking if that drink exists in the table;
                          if(myresult0.next()){
                              float counternumber=myresult0.getFloat("no_of_cartons");
                              float updatedcounter=counternumber+enteredStock;
                              //perform updating the table.
                              try{
                                  updateTables=conn.prepareStatement("UPDATE counter_drinks SET no_of_cartons='"+updatedcounter+"' WHERE drink_name='"+mydrinkname.getSelectedItem().toString()+"'");
                                  updateTables.execute();
                                  //JOptionPane.showMessageDialog(null, "Update Successfull", "GRILL PRIME JUNCTION RESTAURANT", JOptionPane.ERROR_MESSAGE);
                                  //Running un update on the store table.
                                  try{
                                        updateStockTable=conn.prepareStatement("UPDATE store_drinks SET no_of_cartons='"+updatedStock+"' WHERE drink_name='"+mydrinkname.getSelectedItem().toString()+"'");
                                        updateStockTable.executeUpdate();
                                        JOptionPane.showMessageDialog(null, "Counter Drinks Updated Successful", "GRILL PRIME JUNCTION RESTAURANT", JOptionPane.INFORMATION_MESSAGE);
                                    }
                                    catch(SQLException ex){
                                        JOptionPane.showMessageDialog(null, "System Error", "GRILL PRIME JUNCTION RESTAURANT", JOptionPane.ERROR_MESSAGE);
           
                                     }
                                  
                              }
                              catch(SQLException ex){
                                  JOptionPane.showMessageDialog(null, "System Error", "GRILL PRIME JUNCTION RESTAURANT", JOptionPane.ERROR_MESSAGE);
           
                      
                              }
                              
                          }
                          else{
                              //perform Insertion ;
                              try{
                                  insertCounter=conn.prepareStatement("INSERT INTO counter_drinks VALUES (?,?)");
                              insertCounter.setString(1, mydrinkname.getSelectedItem().toString());
                              insertCounter.setFloat(2, enteredStock);
                              insertCounter.execute();
                              //let us now update the other table store_drinks;
                                    try{
                                        updateStockTable=conn.prepareStatement("UPDATE store_drinks SET no_of_cartons='"+updatedStock+"' WHERE drink_name='"+mydrinkname.getSelectedItem().toString()+"'");
                                        updateStockTable.executeUpdate();
                                        JOptionPane.showMessageDialog(null, "Counter Updated Successful", "GRILL PRIME JUNCTION RESTAURANT", JOptionPane.INFORMATION_MESSAGE);
                                    }
                                    catch(SQLException ex){
                                        
                                     }
                              
                              }
                              catch(SQLException ex){
                                  JOptionPane.showMessageDialog(null, "Problem Inserting Record", "GRILL PRIME JUNCTION RESTAURANT", JOptionPane.ERROR_MESSAGE);
           
                              }
                              //System.out.println("Table is empty");
                          }
                          
                      }
                      catch(SQLException ex){
                          JOptionPane.showMessageDialog(null, "System Error", "GRILL PRIME JUNCTION RESTAURANT", JOptionPane.ERROR_MESSAGE);
           
                      }
                       
                   }                   
                   
                   
                   
                   
                   else{
                       JOptionPane.showMessageDialog(null, "You can Only add the remaining "+mystorestock+" Cartons  of "+mydrinkname.getSelectedItem().toString()+" to Counter", "GRILL PRIME JUNCTION RESTAURANT", JOptionPane.ERROR_MESSAGE);
           
                   }
                   
                   
                   
               }
           }
           catch(SQLException ex){
               JOptionPane.showMessageDialog(null, "System Error", "GRILL PRIME JUNCTION RESTAURANT", JOptionPane.ERROR_MESSAGE);
           }
       }
    }//GEN-LAST:event_updatecounterActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CounterUpdate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CounterUpdate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CounterUpdate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CounterUpdate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CounterUpdate().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField cartons;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JComboBox<String> mydrinkname;
    private javax.swing.JToggleButton updatecounter;
    // End of variables declaration//GEN-END:variables

    private void getAvailableDrinks() {
        try {
            PreparedStatement prepareme=conn.prepareStatement("SELECT drink_name  FROM store_drinks WHERE no_of_cartons >0");
            ResultSet mydrinks=prepareme.executeQuery();
            while(mydrinks.next()){
                mydrinkname.addItem(mydrinks.getString("drink_name"));
                
            }
        } catch (SQLException ex) {
            Logger.getLogger(CounterUpdate.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    

    
}
